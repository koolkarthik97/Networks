#include<stdio.h>
#include<string.h>
#include<sys/socket.h>
#include<arpa/inet.h>
#include<unistd.h>
int main(int argc,int *argv[])
{
        int pid,socket_desc,client_sock,c,read_size;
        struct sockaddr_in server,client;
        char client_message[2000],server_message[2000];
        socket_desc=socket(AF_INET,SOCK_STREAM,0);
        if(socket_desc == -1)
        {
                printf("\nsocket creation failed");
        }
        puts("\nsocket created");
        bzero(&server,sizeof(server));
        server.sin_family= AF_INET;
        server.sin_addr.s_addr= INADDR_ANY;
        server.sin_port= htons(3507);
        if(bind(socket_desc,(struct sockaddr*)&server,sizeof(server))<0)
        {
                perror("\nbind failed");
                return 1;
        }
        puts("\nbind done");
        listen(socket_desc,3);
        puts("\nwriting for incoming connections");
        c=sizeof(struct sockaddr_in);
        while(1)
        {

                client_sock=accept(socket_desc,(struct sockaddr*)&client,(socklen_t*)&c);
                if(client_sock<0)
                {
                        perror("accept failed");
                        return 1;
                }
                puts("connection successfull");
                if(pid=fork()==0)
                {
                        while((read_size=read(client_sock,client_message,2000))>0)
                        {
                                bzero(server_message,2000);
                                printf("\n client :");
                                puts(client_message);
                                bzero(client_message,2000);
                                printf("server: ");
                                scanf("%s",server_message);
                                write(client_sock,server_message,strlen(server_message));
                        }
 if(read_size == 0)
                        {
                                puts("client disconnected");
                                fflush(stdout);
                        }
                        else if(read_size== -1)
                        {
                                perror("recv failed");
                        }
                        close(client_sock);
                }
        }
        close(socket_desc);
        return 0;
}
